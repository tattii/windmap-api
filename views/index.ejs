<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8 />
		<title>WindMap / Surf / MSM</title>
		<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
		<link href='https://api.tiles.mapbox.com/mapbox.js/v1.6.4/mapbox.css' rel='stylesheet' />
		<style>
			body { margin:0; padding:0; }
			#map { position:absolute; top:0; bottom:0; width:100%; z-index:1; cursor:default; }
			#overlay { position:absolute; top:0; bottom:0; width:100%; z-index:4; }
			#loading { position:absolute; width:100px; height:120px; top:50%; left:50%; margin-left:-50px; margin-top:-50px; z-index:11; }
			#info { position:absolute; left:10px; top:0; z-index:20; }
			#info h1 { color:#fff; font-size:24px; }
			#wind-dialog { position:absolute; bottom:10px; right:10px; z-index:20; color:#fff; }

			#stream-layer-stream { position:absolute; top:0; z-index:2; }
			#stream-layer-mask { position:absolute; top:0; z-index:3;}
		</style>
	</head>
	<body>
		<div id='map'></div>
		<div id="loading"></div>
		<div id="info">
			<h1>2015-01-22 12:00 JST / Surface / MSM</h1>
		</div>
		<div id="wind-dialog"></div>

		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
		<script src='https://api.tiles.mapbox.com/mapbox.js/v1.6.4/mapbox.js'></script>
		<script src="/js/underscore.js"></script>
		<script src="/js/stream.js"></script>
		<script src="/js/sonic.js"></script>
		<script>
			$(function() {
				// map
				var map_id = 'tattii.j1a9fl0a';
				var mapboxTiles = L.tileLayer(
					'https://{s}.tiles.mapbox.com/v3/' + map_id + '/{z}/{x}/{y}.png',
					{ attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Mapbox</a>' }
				);

				var map = L.map('map', {
						center: [35, 136],
						zoom: 9,
						minZoom: 5,
						maxZoom: 13,
						attributionControl: false
					})
					.addLayer(mapboxTiles);
				map.zoomControl.setPosition("bottomleft");

				loading();
				var wind_field;
				var req;
				function getWindData(callback, s) {
					$("#loading").show();
					var b = map.getBounds();
					var str_bounds = b.getNorth() +","+ b.getWest() +","+ b.getSouth() +","+ b.getEast();
					var start = Date.now();
					if (req) req.abort();
					req = $.ajax({
						url: "/wind",
						type: "GET",
						dataType: "jsonp",
						data: {
							bounds: str_bounds,
							forecastTime: 0,
							zoom: map.getZoom()
						},
						success: function(data, status) {
							var end = Date.now();
							var elapsed = end - start;
							console.log("get wind data: " + elapsed + "ms");
							console.log(data);
							$("#loading").hide();
							callback(data, s);
						}
					});
				}

				
				var StreamLayer = L.Class.extend({
					initialize: function(getWindData) {
						this._getWindData = getWindData
					},

					onAdd: function(map) {
						this._map = map;
						this._width  = map.getSize().x;	
						this._height = map.getSize().y;	

						this._el = L.DomUtil.create('div', 'stream-layer leaflet-zoom-hide');
						map.getPanes().overlayPane.appendChild(this._el);

						var layer = document.getElementsByClassName("stream-layer")[0];

						var maskLayer = document.createElement("canvas");
						maskLayer.id = "stream-layer-mask";
						layer.appendChild(maskLayer);
						var maskCv = document.getElementById("stream-layer-mask");
						this._maskCtx = maskCv.getContext('2d');
						maskCv.width = this._width;
						maskCv.height = this._height;

						var streamLayer = document.createElement("canvas");
						streamLayer.id = "stream-layer-stream";
						layer.appendChild(streamLayer);
						var streamCv = document.getElementById("stream-layer-stream");
						this._streamCtx = streamCv.getContext('2d');
						streamCv.width = this._width;
						streamCv.height = this._height;
						this._streamCtx.globalAlpha = 0.9;


						this.stream = new Stream({ x:[0, this._width], y:[0, this._height] }, this._streamCtx, this._maskCtx);

						map.on('viewreset', this._reset, this);
						map.on('moveend', this._reset, this);
						this._reset();
					},

					onRemove: function(map) {
						map.getPanes().overlayPane.removeChild(this._el);
						map.off('viewreset', this._reset, this);
						map.off('moveend', this._reset, this);
					},

					_reset: function() {
						L.DomUtil.setOpacity(this._el, 0);
						wind_field = null;
						hidePointWind();

						this._getWindData(function(wind_data, t) {
							// projection
							var b = t._map.getBounds();
							var proj = new SimpleProjection(
								{ x:0,   y:0,              lat:b.getNorth(), lng:b.getWest() },
								{ x:t._width, y:t._height, lat:b.getSouth(), lng:b.getEast() }
							);

							t._streamCtx.clearRect(0, 0, t._width, t._height);
						//	t._maskCtx.clearRect(0, 0, t._width, t._height);

							// stream
							var scale = [
								0.3, //5
								0.4,
								0.6,
								0.8,
								1.0, //9
							];
							wind_field = new GribWind(wind_data);
							t.stream.setField(wind_field, proj, scale[t._map.getZoom()-5]);
							t.stream.animate();

							// move canvas position
							var pos = t._map.latLngToLayerPoint(b.getNorthWest());
							L.DomUtil.setPosition(t._el, pos);
							L.DomUtil.setOpacity(t._el, 1.0);
						}, this);
					}



				});
				map.addLayer(new StreamLayer(getWindData));


				var circleIcon = L.divIcon({
					iconSize: [20, 20],
					iconAnchor: [10, 10],
					className: "",
					html: '<svg width="20" height="20"><circle cx="10" cy="10" r="6" fill="none"   stroke="#3aff3a" stroke-width="2.5"/></svg>'
				});

				var marker;
				map.on("click",	function showPointWind(e) {
					if ( wind_field ){
						var v = wind_field.getVector([e.latlng.lat, e.latlng.lng]);
						var speed = Math.sqrt(v[0]*v[0] + v[1]*v[1]);
						var ang = Math.acos(v[1]/speed) / Math.PI * 180;
						if (v[0] < 0) ang = 360 - ang;
						$("#wind-dialog").text(Math.round(ang) + "Â° "  +Math.round(speed*10)/10 + "m/s");
						if (marker) {
							marker.setLatLng(e.latlng);
						}else{
							marker = L.marker(e.latlng, {icon:circleIcon}).addTo(map);
						}
					}
				});

				function hidePointWind(){
					if (marker) map.removeLayer(marker);
					marker = null;
					$("#wind-dialog").text("");
				}


				/**
				 * loading animation by sonic.js
				 */
				function loading() {
					var loader = {
						width: 100,
						height: 100,
						stepsPerFrame: 1,
						trailLength: 1,
						pointDistance: .025,
						strokeColor: '#05E2FF',
						fps: 20,
						setup: function() {
							this._.lineWidth = 2;
						},
						step: function(point, index) {
							var cx = this.padding + 50,
							cy = this.padding + 50,
							_ = this._,
							angle = (Math.PI/180) * (point.progress * 360);
							this._.globalAlpha = Math.max(.5, this.alpha);
							_.beginPath();
							_.moveTo(point.x, point.y);
							_.lineTo(
								(Math.cos(angle) * 35) + cx,
								(Math.sin(angle) * 35) + cy
							);
							_.closePath();
							_.stroke();
							_.beginPath();
							_.moveTo(
								(Math.cos(-angle) * 32) + cx,
								(Math.sin(-angle) * 32) + cy
							);
							_.lineTo(
								(Math.cos(-angle) * 27) + cx,
								(Math.sin(-angle) * 27) + cy
							);
							_.closePath();
							_.stroke();
						},
						path: [
							['arc', 50, 50, 40, 0, 360]
						]
					};
					var sonic = new Sonic(loader);
					$("#loading").append(sonic.canvas);
					sonic.play();
				}


			});
		</script>

		<script>
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

			ga('create', 'UA-58855000-2', 'auto');
			ga('send', 'pageview');

		</script>
	</body>
</html>
